// <auto-generated />
using System;
using Api.Rtt.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Api.Rtt.Migrations
{
    [DbContext(typeof(ApiContext))]
    [Migration("20220509124553_female_bracket")]
    partial class female_bracket
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.16");

            modelBuilder.Entity("Api.Rtt.Models.Entities.Bracket", b =>
                {
                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("TournamentId");

                    b.ToTable("bracket");
                });

            modelBuilder.Entity("Api.Rtt.Models.Entities.City", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(767)");

                    b.HasKey("Name");

                    b.ToTable("city");
                });

            modelBuilder.Entity("Api.Rtt.Models.Entities.Court", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Opened")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Surface")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TennisCenterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TennisCenterId");

                    b.ToTable("court");
                });

            modelBuilder.Entity("Api.Rtt.Models.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CourtId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime");

                    b.Property<int?>("OrderInSchedule")
                        .HasColumnType("int");

                    b.Property<int>("PlaceInRound")
                        .HasColumnType("int");

                    b.Property<int?>("Player1Rni")
                        .HasColumnType("int");

                    b.Property<int?>("Player2Rni")
                        .HasColumnType("int");

                    b.Property<int>("RoundId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ScheduleDay")
                        .HasColumnType("datetime");

                    b.Property<int?>("ScheduleFactoryId")
                        .HasColumnType("int");

                    b.Property<string>("Score")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("datetime");

                    b.Property<int?>("WinnerRni")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("Player1Rni");

                    b.HasIndex("Player2Rni");

                    b.HasIndex("RoundId");

                    b.HasIndex("WinnerRni");

                    b.HasIndex("ScheduleFactoryId", "ScheduleDay");

                    b.ToTable("match");
                });

            modelBuilder.Entity("Api.Rtt.Models.Entities.Player", b =>
                {
                    b.Property<int>("Rni")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("Rni");

                    b.ToTable("player");
                });

            modelBuilder.Entity("Api.Rtt.Models.Entities.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BracketId")
                        .HasColumnType("int");

                    b.Property<int>("Stage")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BracketId");

                    b.ToTable("rounds");
                });

            modelBuilder.Entity("Api.Rtt.Models.Entities.Schedule", b =>
                {
                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Day")
                        .HasColumnType("datetime");

                    b.HasKey("FactoryId", "Day");

                    b.ToTable("schedule");
                });

            modelBuilder.Entity("Api.Rtt.Models.Entities.TennisCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("tennis_center");
                });

            modelBuilder.Entity("Api.Rtt.Models.Entities.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateRequest")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime");

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NetRange")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfQualificationWinners")
                        .HasColumnType("int");

                    b.Property<int?>("QualificationId")
                        .HasColumnType("int");

                    b.Property<int>("Stage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.HasIndex("QualificationId");

                    b.ToTable("tournament");
                });

            modelBuilder.Entity("Api.Rtt.Models.Entities.TournamentFactory", b =>
                {
                    b.Property<int>("FirstTournamentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Ages")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateRequest")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime");

                    b.Property<string>("Genders")
                        .HasColumnType("text");

                    b.Property<bool>("HasQualification")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NetRange")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfQualificationWinners")
                        .HasColumnType("int");

                    b.Property<int>("TennisCenterId")
                        .HasColumnType("int");

                    b.HasKey("FirstTournamentId");

                    b.HasIndex("TennisCenterId");

                    b.ToTable("tournament_factory");
                });

            modelBuilder.Entity("PlayerTournament", b =>
                {
                    b.Property<int>("PlayersRni")
                        .HasColumnType("int");

                    b.Property<int>("TournamentsId")
                        .HasColumnType("int");

                    b.HasKey("PlayersRni", "TournamentsId");

                    b.HasIndex("TournamentsId");

                    b.ToTable("PlayerTournament");
                });

            modelBuilder.Entity("Api.Rtt.Models.Entities.Bracket", b =>
                {
                    b.HasOne("Api.Rtt.Models.Entities.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Api.Rtt.Models.Entities.Court", b =>
                {
                    b.HasOne("Api.Rtt.Models.Entities.TennisCenter", null)
                        .WithMany("Courts")
                        .HasForeignKey("TennisCenterId");
                });

            modelBuilder.Entity("Api.Rtt.Models.Entities.Match", b =>
                {
                    b.HasOne("Api.Rtt.Models.Entities.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("Api.Rtt.Models.Entities.Player", "Player1")
                        .WithMany()
                        .HasForeignKey("Player1Rni");

                    b.HasOne("Api.Rtt.Models.Entities.Player", "Player2")
                        .WithMany()
                        .HasForeignKey("Player2Rni");

                    b.HasOne("Api.Rtt.Models.Entities.Round", "Round")
                        .WithMany("Matches")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Rtt.Models.Entities.Player", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerRni");

                    b.HasOne("Api.Rtt.Models.Entities.Schedule", null)
                        .WithMany("Matches")
                        .HasForeignKey("ScheduleFactoryId", "ScheduleDay");

                    b.Navigation("Court");

                    b.Navigation("Player1");

                    b.Navigation("Player2");

                    b.Navigation("Round");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("Api.Rtt.Models.Entities.Round", b =>
                {
                    b.HasOne("Api.Rtt.Models.Entities.Bracket", "Bracket")
                        .WithMany("Rounds")
                        .HasForeignKey("BracketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bracket");
                });

            modelBuilder.Entity("Api.Rtt.Models.Entities.Schedule", b =>
                {
                    b.HasOne("Api.Rtt.Models.Entities.TournamentFactory", "Factory")
                        .WithMany("Schedules")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factory");
                });

            modelBuilder.Entity("Api.Rtt.Models.Entities.Tournament", b =>
                {
                    b.HasOne("Api.Rtt.Models.Entities.TournamentFactory", "Factory")
                        .WithMany("Tournaments")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Rtt.Models.Entities.Tournament", "Qualification")
                        .WithMany()
                        .HasForeignKey("QualificationId");

                    b.Navigation("Factory");

                    b.Navigation("Qualification");
                });

            modelBuilder.Entity("Api.Rtt.Models.Entities.TournamentFactory", b =>
                {
                    b.HasOne("Api.Rtt.Models.Entities.TennisCenter", "TennisCenter")
                        .WithMany()
                        .HasForeignKey("TennisCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TennisCenter");
                });

            modelBuilder.Entity("PlayerTournament", b =>
                {
                    b.HasOne("Api.Rtt.Models.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersRni")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Rtt.Models.Entities.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Rtt.Models.Entities.Bracket", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("Api.Rtt.Models.Entities.Round", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("Api.Rtt.Models.Entities.Schedule", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("Api.Rtt.Models.Entities.TennisCenter", b =>
                {
                    b.Navigation("Courts");
                });

            modelBuilder.Entity("Api.Rtt.Models.Entities.TournamentFactory", b =>
                {
                    b.Navigation("Schedules");

                    b.Navigation("Tournaments");
                });
#pragma warning restore 612, 618
        }
    }
}
